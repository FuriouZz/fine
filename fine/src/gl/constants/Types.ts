import { GL } from "./GL";

export type GLContext = WebGL2RenderingContext
export type GLImage = ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement

export const enum GLDrawUsage {
  STATIC = GL.STATIC_DRAW,
  STREAM = GL.STREAM_DRAW,
  DYNAMIC = GL.DYNAMIC_DRAW,
}

export const enum GLClear {
  DEPTH_BUFFER = GL.DEPTH_BUFFER_BIT,
  STENCIL_BUFFER = GL.STENCIL_BUFFER_BIT,
  COLOR_BUFFER = GL.COLOR_BUFFER_BIT,
}

export const enum GLPrimitive {
  POINTS = GL.POINTS,
  LINES = GL.LINES,
  LINE_LOOP = GL.LINE_LOOP,
  LINE_STRIP = GL.LINE_STRIP,
  TRIANGLES = GL.TRIANGLES,
  TRIANGLE_STRIP = GL.TRIANGLE_STRIP,
  TRIANGLE_FAN = GL.TRIANGLE_FAN,
}

export const enum GLBlendMode {
  ZERO = GL.ZERO,
  ONE = GL.ONE,
  SRC_COLOR = GL.SRC_COLOR,
  ONE_MINUS_SRC_COLOR = GL.ONE_MINUS_SRC_COLOR,
  SRC_ALPHA = GL.SRC_ALPHA,
  ONE_MINUS_SRC_ALPHA = GL.ONE_MINUS_SRC_ALPHA,
  DST_ALPHA = GL.DST_ALPHA,
  ONE_MINUS_DST_ALPHA = GL.ONE_MINUS_DST_ALPHA,
  DST_COLOR = GL.DST_COLOR,
  ONE_MINUS_DST_COLOR = GL.ONE_MINUS_DST_COLOR,
  SRC_ALPHA_SATURATE = GL.SRC_ALPHA_SATURATE,
  CONSTANT_COLOR = GL.CONSTANT_COLOR,
  ONE_MINUS_CONSTANT_COLOR = GL.ONE_MINUS_CONSTANT_COLOR,
  CONSTANT_ALPHA = GL.CONSTANT_ALPHA,
  ONE_MINUS_CONSTANT_ALPHA = GL.ONE_MINUS_CONSTANT_ALPHA,
}

export const enum GLBlendEq {
  ADD = GL.FUNC_ADD,
  SUBTRACT = GL.FUNC_SUBTRACT,
  REVERSE_SUBTRACT = GL.FUNC_REVERSE_SUBTRACT,
}

export const enum GLBuffer {
  ARRAY = GL.ARRAY_BUFFER,
  ELEMENTS = GL.ELEMENT_ARRAY_BUFFER,
}

export const enum GLCulling {
  FRONT = GL.FRONT,
  BACK = GL.BACK,
  FRONT_AND_BACK = GL.FRONT_AND_BACK,
}

export const enum GLType {
  BYTE = GL.BYTE,
  UNSIGNED_BYTE = GL.UNSIGNED_BYTE,
  SHORT = GL.SHORT,
  UNSIGNED_SHORT = GL.UNSIGNED_SHORT,
  INT = GL.INT,
  UNSIGNED_INT = GL.UNSIGNED_INT,
  FLOAT = GL.FLOAT,
}

export const enum GLTypeSize {
  BYTE = 1,
  UNSIGNED_BYTE = 1,
  SHORT = 2,
  UNSIGNED_SHORT = 2,
  INT = 4,
  UNSIGNED_INT = 4,
  FLOAT = 4,
}

export const enum GLShaderType {
  VERTEX = GL.VERTEX_SHADER,
  FRAGMENT = GL.FRAGMENT_SHADER,
}

export const enum GLTextureWrap {
  MIRROR = GL.MIRRORED_REPEAT,
  CLAMP = GL.CLAMP_TO_EDGE,
  REPEAT = GL.REPEAT,
}

export const enum GLTest {
  NEVER = GL.NEVER,
  LESS = GL.LESS,
  EQUAL = GL.EQUAL,
  LEQUAL = GL.LEQUAL,
  GREATER = GL.GREATER,
  NOTEQUAL = GL.NOTEQUAL,
  GEQUAL = GL.GEQUAL,
  ALWAYS = GL.ALWAYS,
}

export const enum GLStencilActions {
  KEEP = GL.KEEP,
  REPLACE = GL.REPLACE,
  INCR = GL.INCR,
  DECR = GL.DECR,
  INVERT = GL.INVERT,
  INCR_WRAP = GL.INCR_WRAP,
  DECR_WRAP = GL.DECR_WRAP,
}

export const enum GLFrontFaceDirection {
  Clockwise = GL.CW,
  CounterClockwise = GL.CCW
}